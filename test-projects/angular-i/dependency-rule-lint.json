[{"filePath":"/Users/rainerh/sheriff/test-projects/angular-i/src/app/customers/ui/customer/customer.component.ts","messages":[{"ruleId":"@softarc/sheriff/dependency-rule","severity":2,"message":"module /src/app/customers/ui cannot access /src/app/customers/data. Tags [domain:customers,type:ui] have no clearance for type:data","line":16,"column":1,"nodeType":"ImportDeclaration","endLine":16,"endColumn":63}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Component, EventEmitter, inject, Input, Output } from '@angular/core';\nimport {\n  NonNullableFormBuilder,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { AsyncPipe, NgForOf, NgIf } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { FormErrorsComponent } from '@eternal/shared/form';\nimport { Customer } from '@eternal/customers/model';\nimport { CustomersRepository } from '@eternal/customers/data';\nimport { Options } from '@eternal/shared/form';\n\n@Component({\n  selector: 'eternal-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.scss'],\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatDatepickerModule,\n    RouterLink,\n    AsyncPipe,\n    NgIf,\n    MatFormFieldModule,\n    FormErrorsComponent,\n    MatInputModule,\n    MatSelectModule,\n    NgForOf,\n  ],\n})\nexport class CustomerComponent {\n  @Input() customer: Customer | undefined;\n  @Input() countries: Options = [];\n  @Input() showDeleteButton = true;\n  @Output() save = new EventEmitter<Customer>();\n  @Output() remove = new EventEmitter<Customer>();\n\n  customersRepository = inject(CustomersRepository);\n\n  formGroup = inject(NonNullableFormBuilder).group({\n    id: [0],\n    firstname: ['', [Validators.required]],\n    name: ['', [Validators.required]],\n    country: ['', [Validators.required]],\n    birthdate: ['', [Validators.required]],\n  });\n\n  submit() {\n    if (this.formGroup.valid) {\n      this.save.emit(this.formGroup.getRawValue());\n    }\n  }\n\n  handleRemove() {\n    if (confirm(`Really delete?`)) {\n      this.remove.emit(this.formGroup.getRawValue());\n    }\n  }\n}\n","usedDeprecatedRules":[]}]